CREATE TABLE `violationmirations` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `date_of_violation` date NOT NULL,
  `date_end_violation` date NOT NULL,
  `no_violation` int(11) NOT NULL,
  `format` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `month_of_violation` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `violation_ROM` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `reporting_day` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `reporting_date` date DEFAULT NULL,
  `job_level` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `department` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `other_information` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `violation_status` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `type_of_violation` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `accumulation` float NOT NULL,
  `violation_accumulation` char(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `alphabet_accumulation` char(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `violation_accumulation2` char(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `violation_accumulation3` char(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `alphabet_id` bigint(20) UNSIGNED NOT NULL,
  `signature_id` bigint(20) UNSIGNED NOT NULL,
  `employee_id` bigint(20) UNSIGNED NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


/// Dimulai dari bulan juni

Tampilkan data dari table violationmigrations dan violations

            $num_print_violationmigrations = DB::table('violationmigrations')
                ->where('employee_id',  $employee_id)              
                ->count();

            $num_print_violations = DB::table('violations')
                ->where('employee_id',  $employee_id)              
                ->count();
       
       if($num_print_violationmigrations > 0 AND $num_print_violations > 0){

            $print_violationmigrations = DB::table('violationmigrations')
                ->where('employee_id',  $employee_id)              
                ->get();

            $print_violations = DB::table('violations')
                ->where('employee_id',  $employee_id)              
                ->get();

            $gabung = array_merge($print_violationmigrations, $print_violations);

            function date_compare($a, $b)
            {
                $t1 = strtotime($a['reporting_date']);
                $t2 = strtotime($b['reporting_date']);
                return $t1 - $t2;
            }

            usort($gabung, 'date_compare');

            $violation = $gabung;
                

       }elseif($num_print_violations == 0 AND $num_print_violationmigrations > 0){

            $print_violationmigrations = DB::table('violationmigrations')
                ->where('employee_id',  $employee_id)              
                ->get();

            $violation = $print_violationmigrations;

       }elseif($num_print_violationmigrations == 0 AND $num_print_violations > 0){

            $print_violations = DB::table('violations')
                ->where('employee_id',  $employee_id)              
                ->get();

            $violation = $print_violations;

       }elseif($num_print_violationmigrations == 0 AND $num_print_violations == 0){

       }else{

       }


            $arr1 = $this->db->query("SELECT tanggal, no_transaksi FROM jurnal_penerimaan_kas WHERE id_piutang_dagang = 1 GROUP BY no_transaksi ")->result_array();
            $arr2 = $this->db->query("SELECT tanggal, no_transaksi FROM jurnal_penjualan WHERE id_piutang_dagang = 1 GROUP BY no_transaksi ")->result_array();
            $arr3 = $this->db->query("SELECT tanggal, no_transaksi FROM jurnal_umum WHERE id_piutang_dagang = 1 GROUP BY no_transaksi ")->result_array();

$gabung = array_merge($arr1, $arr2, $arr3);
// print_r($gabung);

function date_compare($a, $b)
{
    $t1 = strtotime($a['tanggal']);
    $t2 = strtotime($b['tanggal']);
    return $t1 - $t2;
}
usort($gabung, 'date_compare');


foreach ($gabung as $dt) :
    $tgl = $dt['tanggal'];
    $nts = $dt['no_transaksi'];
    echo "ini tanggal " . $dt['tanggal'] . " no_transaksi "  . $dt['no_transaksi'] . "<br>";
    $a_jkm = $this->db->query("SELECT debet, kredit FROM jurnal_penerimaan_kas WHERE tanggal = '$tgl' AND no_transaksi = '$nts' ")->num_rows();
    echo $a_jkm;
endforeach;


// Jika Tanggal Laporan < tanggal 01/06/2022
maka data table menggunakan violationmigrations

jika tanggal laporan tanggal >= 01/06/2022
maka data table menggunakan violations











