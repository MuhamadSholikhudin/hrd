-RUNNING LARAVEL
php artisan serve

- PHP ARTISAN migrate
php artisan make:migration create_users_table

- Running All Outstanding Migrations
php artisan migrate

- Forcing Migrations In Production
php artisan migrate --force

#Rolling Back Migrations
-Rollback The Last Migration Operation
php artisan migrate:rollback

-Rollback all migrations
php artisan migrate:reset

-Rollback all migrations and run them all again
php artisan migrate:refresh
 
php artisan migrate:refresh --seed


-Factory
php artisan make:factory EmployeeFactory

-Model 
php artisan make:model Employee

-The Route List
php artisan route:list

php artisan route:list -v

-Route Parameters
Route::get('/user/{id}', function ($id) {
    return 'User '.$id;
});

Route::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {
    //
});

-Parameters & Dependency Injection
Route::get('/user/{id}', function (Request $request, $id) {
    return 'User '.$id;
});

-Resource Controllers
php artisan make:controller PhotoController --resource

php artisan make:controller PhotoController --model=Photo --resource

use App\Http\Controllers\PhotoController;
 
Route::resource('photos', PhotoController::class);


Import Export Excel and CSV File Tutorial
enable extensi .gl pada php.ini 

composer require maatwebsite/excel

php artisan make:import UsersImport --model=User

php artisan make:export UsersExport --model=User


php artisan make:migration create_articles_table
        Schema::create('articles', function (Blueprint $table) {
            $table->id();
            $table->char('article', 5);
            $table->string('chapters')->nullable();
            $table->text('article_sound')->nullable();           
            $table->timestamps();
        });

php artisan make:migration create_paragraphs_table
        Schema::create('paragraphs', function (Blueprint $table) {
            $table->id();
            $table->char('paragraph', 5);
            $table->string('sub_chapters')->nullable();
            $table->text('description')->nullable();     
            $table->string('type_of_verse');      
            $table->foreignId('article_id');      
            $table->timestamps();
        });

php artisan make:migration create_letters_table
        Schema::create('letters', function (Blueprint $table) {
            $table->id();
            $table->text('description')->nullable();     
            $table->foreignId('paragraph_id');      
            $table->timestamps();
        });

php artisan make:migration create_violations_table
        Schema::create('violations', function (Blueprint $table) {
            $table->id();
            $table->date('date_of_violation');     
            $table->string('violation_status')->nullable();  
            $table->string('type_of_violation')->nullable();  
            $table->integer('no_violation');  
            $table->string('format')->nullable();  
            $table->string('month_of_violation')->nullable();  
            $table->string('violation_ROM')->nullable();  
            $table->string('reporting_day')->nullable();  
            $table->date('reporting_date');  
            $table->string('part')->nullable();  
            $table->text('other_information')->nullable();     
            $table->foreignId('signature_id');  
            $table->foreignId('letter_id');      
            $table->foreignId('employee_id');      
            $table->timestamps();
        });

php artisan make:migration create_layoffs_table
        Schema::create('layoffs', function (Blueprint $table) {
            $table->id();
            $table->date('layoff_date');     
            $table->string('type_of_layoff')->nullable();     
            $table->foreignId('employee_id');      
            $table->timestamps();
        });

php artisan make:migration create_signatures_table
        Schema::create('signatures', function (Blueprint $table) {
            $table->id();
            $table->string('name')->nullable();     
            $table->string('department')->nullable();     
            $table->string('part')->nullable();     
            $table->foreignId('employee_id');      
            $table->timestamps();
        });

php artisan make:migration create_default_texts_table
        Schema::create('default_texts', function (Blueprint $table) {
            $table->id();
            $table->date('layoff_date');     
            $table->text('description')->nullable();     
            $table->string('default_state')->nullable();     
            $table->string('default_type')->nullable();     
            $table->timestamps();
        });

php artisan make:migration create_hi_recaps_table
        Schema::create('hi_recaps', function (Blueprint $table) {
            $table->id();
            $table->text('description')->nullable();     
            $table->foreignId('employee_id');     
            $table->timestamps();
        });






            public function import() 
    {
        // Excel::import(new EmployeesImport, request()->file('file'));

        $rows =  Excel::toArray(new EmployeesImport, request()->file('file'));
        // dd($rows);
        foreach($rows as $row):
            foreach($row as $x):
                if($x['number_of_employees'] == NULL){

                }else{ 

                //CEK number_of_employee sudah ada pada database belum       
                    $search_employee = DB::table('employees')->where('number_of_employees', '=', floor($x['number_of_employees']))->count();
                          
                    if($search_employee > 0){

                    }else{

                        // CEK Department
                        $c_date_of_birth = $x['date_of_birth'];
                        if($c_date_of_birth == null){
                            $date_of_birth = NULL;
                        }else{
                            $date_of_birth = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_of_birth']);
                        }

                        $c_hire_date = $x['hire_date'];
                        if($c_hire_date == null){
                            $hire_date = NULL;
                        }else{
                            $hire_date = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['hire_date']);
                        }

                        $c_end_of_contract = $x['end_of_contract'];
                        if($c_end_of_contract == null){
                            $end_of_contract = NULL;
                        }else{
                            $end_of_contract = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['end_of_contract']);
                        }

                        $c_date_out = $x['date_out'];
                        if($c_date_out == null){
                            $date_out = NULL;
                        }else{
                            $date_out = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_out']);
                        }

                        $c_exit_statement = $x['exit_statement'];
                        if($c_exit_statement == null){
                            $status_employee = 'active';
                        }elseif($c_exit_statement == '-'){
                            $status_employee = 'active';
                        }elseif($c_exit_statement != null){
                            $status_employee = 'notactive';
                        }

                        $c_kode_ptkp = $x['kode_ptkp'];
                        if($c_kode_ptkp == null){
                            $kode_ptkp = '';
                        }else{
                            $date_of_birth = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_of_birth']);
                        }
                    
                        // CEK tanggal [date_of_birth, hire_date, end_of_contract, date_out, year_ptkp ]
                        
                        // CEK date_of_birth '12/04/2022
                        // $date_of_birth_t = strtotime($x['date_of_birth']);             
                        // $date_of_birth = date('Y-m-d', $date_of_birth_t);
                        // $date = intval($row['date_of_birth']);
                        


                        // CEK hire_date
                        // $hire_date_t = strtotime($x['hire_date']);             
                        // $hire_date = date('Y-m-d', $hire_date_t);

                        // CEK end_of_contract 
                        // $end_of_contract_t = strtotime($x['end_of_contract']);             
                        // $end_of_contract = date('Y-m-d', $end_of_contract_t);

                        // CEK date_out          
                        // $date_out_t = strtotime($x['date_out']);             
                        // $date_out = date('Y-m-d', $date_out_t);

                        // CEK year_ptkp
                        // $year_ptkp_t = strtotime($x['year_ptkp']);             
                        // $year_ptkp = date('Y-m-d', $year_ptkp_t);
                        

                        // CEK Department
                        $num_dept = DB::table('departments')->where('department', '=', $x['department'])->count();
                        if($num_dept > 0){
                            $department_get = DB::table('departments')->where('department', '=', $x['department'])->first();
                            $department_id = $department_get->id;
                        }else{
                            $department_id = 21;
                        }

                        // CEK job_level
                        $num_dept = DB::table('jobs')->where('job_level', '=', $x['job_level'])->count();
                        if($num_dept > 0){
                            $job_get = DB::table('jobs')->where('job_level', '=', $x['job_level'])->first();
                            $job_id = $job_get->id;
                        }else{
                            $job_id = 104;
                        }

                // if($department_get == )
                // $job_get = DB::table('jobs')->where('jobs', '=', $x['job'])->first();
                
                
                        DB::table('employees')->insert([
                            'number_of_employees' => floor($x['number_of_employees']),
                            'name'=> $x['name'],
                            'gender'=> $x['gender'],  
                            'place_of_birth'=> $x['place_of_birth'],
                            'date_of_birth'=> \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_of_birth']),
                            'marital_status'=> $x['marital_status'],
                            'religion'=> $x['religion'], 
                            'biological_mothers_name' => $x['biological_mothers_name'],
                            'national_id'=> $x['national_id'],
                            'address_jalan'=> $x['address_jalan'],
                            'address_rt'=> $x['address_rt'],
                            'address_rw'=> $x['address_rw'],
                            'address_village'=> $x['address_village'],
                            'address_district'=> $x['address_district'],
                            'address_city'=> $x['address_city'],
                            'address_province'=> $x['address_province'],
                            'phone'=> $x['phone'],
                            'email'=> $x['email'],
                            'npwp'=> $x['npwp'],
                            'bank_name'=> $x['bank_name'],
                            'bank_branch'=> $x['bank_branch'],
                            'bank_account_name'=> $x['bank_account_name'],
                            'bank_account_number'=> $x['bank_account_number'],
                            'bpjs_ketenagakerjaan'=> $x['bpjs_ketenagakerjaan'],
                            'bpjs_kesehatan' => $x['bpjs_kesehatan'],
                            'hire_date'=> \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['hire_date']),
                            'employee_type'=> $x['employee_type'],
                            'end_of_contract'=> \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['end_of_contract']),
                            'date_out'=> $date_out,
                            'exit_statement'=> $x['exit_statement'],
                            'cell'=> $x['cell'], 
                            'bagian'=> $x['bagian'],
                            'kode_ptkp'=> $x['kode_ptkp'],
                            'year_ptkp'=> $x['year_ptkp'],
                            'educate'=> $x['educate'],
                            'major'=> $x['major'],
                            'finger_id' => $x['number_of_employees'],
                            'status_employee' => 'active',
                            'date_bpjs_ketenagakerjaan'=> date('Y-m-d'),
                            'date_bpjs_kesehatan'=> date('Y-m-d'),
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                            'job_id'=> $job_id,
                            'department_id'=> $department_id
                            ]);

                        // TAMPILKAN DATA KARYAWAN YANG SUDAH DI INSERT
                        $employee_get = DB::table('employees')->where('number_of_employees', '=', floor($x['number_of_employees']))->first();
                            
                        DB::table('salaries')->insert([
                            'employee_id' => $employee_get->id,
                            'basic_salary' => $x['basic_salary'],
                            'positional_allowance' => $x['positional_allowance'],
                            'transportation_allowance' => $x['transportation_allowance'],
                            'attendance_allowance' => $x['attendance_allowance'],
                            'grade_salary' => $x['grade_salary'],
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                            'total_salary' => 0
                        ]);

                        DB::table('startworks')->insert([
                            'startwork_date'=> date('Y-m-d'),
                            'bagian'=> $x['bagian'],
                            'cell'=> $x['cell'],
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                            'job_id'=> $job_id,
                            'department_id'=> $department_id,
                            'employee_id'=> $employee_get->id
                            ]);
                    }
                }
            endforeach;
        endforeach;
        return redirect('/datamaster/employees');
    }

        public function model(array $row)
    {
        return new Employee([
            //
            
            'number_of_employees' => $row['number_of_employees'],
            'name'=> $row['name'],
            'gender'=> $row['gender'],  
            'place_of_birth'=> $row['place_of_birth'],
            'date_of_birth'=> $row['date_of_birth'],
            'marital_status'=> $row['marital_status'],
            'religion'=> $row['religion'], 
            'biological_mothers_name' => $row['biological_mothers_name'],
            'national_id'=> $row['national_id'],
            'address_jalan'=> $row['address_jalan'],
            'address_rt'=> $row['address_rt'],
            'address_rw'=> $row['address_rw'],
            'address_village'=> $row['address_village'],
            'address_district'=> $row['address_district'],
            'address_city'=> $row['address_city'],
            'address_province'=> $row['address_province'],
            'phone'=> $row['phone'],
            'email'=> $row['email'],
            'npwp'=> $row['npwp'],
            'bank_name'=> $row['bank_name'],
            'bank_branch'=> $row['bank_branch'],
            'bank_account_name'=> $row['bank_account_name'],
            'bank_account_number'=> $row['bank_account_number'],
            'bpjs_ketenagakerjaan'=> $row['bpjs_ketenagakerjaan'],
            'bpjs_kesehatan' => $row['bpjs_kesehatan'],
            'hire_date'=> $row['hire_date'],
            'employee_type'=> $row['employee_type'],
            'end_of_contract'=> $row['end_of_contract'],
            'date_out'=> $row['date_out'],
            'exit_statement'=> $row['exit_statement'],
            'job_id'=> $row['job_id'],
            'department_id'=> $row['department_id'],            
            'job_level'=> $row['job_level'],
            'department'=> $row['department'],
            'cell'=> $row['cell'], 
            'bagian'=> $row['bagian'],
            'kode_ptkp'=> $row['kode_ptkp'],
            'year_ptkp'=> $row['year_ptkp'],
            'basic_salary' => $row['basic_salary'],
            'educate'=> $row['educate'],
            'major'=> $row['major'],

            'positional_allowance' => $row['positional_allowance'],
            'transportation_allowance' => $row['transportation_allowance'],
            'attendance_allowance' => $row['attendance_allowance'],
            'grade_salary' => $row['grade_salary'],
            
            'finger_id' => $row['number_of_employees'],
            'date_bpjs_ketenagakerjaan'=> $row['date_bpjs_ketenagakerjaan'],
            'date_bpjs_kesehatan'=> $row['date_bpjs_kesehatan'],
        ]);
    }