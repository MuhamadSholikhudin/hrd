Department
Job::create(["code_job_level" => "PD", "job_level" => "PRESIDEN DIREKTUR", "level" => "1"]);
Job::create(["code_job_level" => "SD", "job_level" => "SENIOR DIREKTUR", "level" => "2"]);
Job::create(["code_job_level" => "DIR", "job_level" => "DIREKTUR", "level" => "3"]);
Job::create(["code_job_level" => "ASDIR", "job_level" => "ASISTEN DIREKTUR", "level" => "4"]);
Job::create(["code_job_level" => "SM", "job_level" => "SENIOR MANAGER", "level" => "5"]);
Job::create(["code_job_level" => "AMA", "job_level" => "ASISTEN MANAGER A", "level" => "6"]);
Job::create(["code_job_level" => "MGRA", "job_level" => "MANAGER A", "level" => "6"]);
Job::create(["code_job_level" => "FMGR", "job_level" => "FACTORY MANAGER", "level" => "7"]);
Job::create(["code_job_level" => "AMI", "job_level" => "ASISTEN MANAGER I", "level" => "8"]);
Job::create(["code_job_level" => "MGRI", "job_level" => "MANAGER I", "level" => "8"]);
Job::create(["code_job_level" => "DOK", "job_level" => "DOKTER", "level" => "8"]);
Job::create(["code_job_level" => "SPV", "job_level" => "SUPERVISOR", "level" => "9"]);
Job::create(["code_job_level" => "ASPV", "job_level" => "ASISTEN SUPERVISOR", "level" => "9"]);
Job::create(["code_job_level" => "LD", "job_level" => "LEADER", "level" => "10"]);
Job::create(["code_job_level" => "SST", "job_level" => "SENIOR STAFF", "level" => "10"]);
Job::create(["code_job_level" => "ST", "job_level" => "STAFF", "level" => "11"]);
Job::create(["code_job_level" => "STO", "job_level" => "STAFF OPERATOR", "level" => "11"]);
Job::create(["code_job_level" => "PWT", "job_level" => "PERAWAT", "level" => "11"]);
Job::create(["code_job_level" => "DRV", "job_level" => "DRIVER", "level" => "12"]);
Job::create(["code_job_level" => "OP", "job_level" => "OPERATOR", "level" => "12"]);




JOb Level
INSERT INTO `jobs`( `code_job_level`, `job_level`, `level`) VALUES 
("PD", "PRESIDEN DIREKTUR", "1"),
("SD", "SENIOR DIREKTUR", "2"),
("DIR", "DIREKTUR", "3"),
("ASDIR", "ASISTEN DIREKTUR", "4"),
("SM", "SENIOR MANAGER", "5"),
("AMA", "ASISTEN MANAGER A", "6"),
("MGRA", "MANAGER A", "6"),
("FMGR", "FACTORY MANAGER", "7"),
("AMI", "ASISTEN MANAGER I", "8"),
("MGRI", "MANAGER I", "8"),
("DOK", "DOKTER", "8"),
("SPV", "SUPERVISOR", "9"),
("ASPV", "ASISTEN SUPERVISOR", "9"),
("LD", "LEADER", "10"),
("SST", "SENIOR STAFF", "10"),
("ST", "STAFF", "11"),
("STO", "STAFF OPERATOR", "11"),
("PWT", "PERAWAT", "11"),
("DRV", "DRIVER", "12"),
("OP", "OPERATOR", "12");

Department::create([ "department" => "ACCOUNTING"]);
Department::create([ "department" => "ASSEMBLY-A"]);
Department::create([ "department" => "ASSEMBLY-B"]);
Department::create([ "department" => "ASSEMBLY-C"]);
Department::create([ "department" => "ASSEMBLY-D"]);
Department::create([ "department" => "ASSEMBLY-D1"]);
Department::create([ "department" => "ASSEMBLY-D2"]);
Department::create([ "department" => "ASSEMBLY-E1"]);
Department::create([ "department" => "ASSEMBLY-E2"]);
Department::create([ "department" => "ASSEMBLY-H"]);
Department::create([ "department" => "CHEMICAL ENGINEERING"]);
Department::create([ "department" => "CUTTING-A"]);
Department::create([ "department" => "CUTTING-B"]);
Department::create([ "department" => "CUTTING-C"]);
Department::create([ "department" => "CUTTING-D1"]);
Department::create([ "department" => "CUTTING-D2"]);
Department::create([ "department" => "CUTTING-E1"]);
Department::create([ "department" => "CUTTING-E2"]);
Department::create([ "department" => "CUTTING-H"]);
Department::create([ "department" => "DEVELOPMENT"]);
Department::create([ "department" => "EMBOSS"]);
Department::create([ "department" => "ENGINEERING"]);
Department::create([ "department" => "EPTE"]);
Department::create([ "department" => "EXIM"]);
Department::create([ "department" => "FACTORY MGR A"]);
Department::create([ "department" => "FACTORY MGR C"]);
Department::create([ "department" => "FACTORY MGR D"]);
Department::create([ "department" => "FACTORY MGR E"]);
Department::create([ "department" => "FINISH GOOD A"]);
Department::create([ "department" => "FINISH GOOD C"]);
Department::create([ "department" => "FINISH GOOD D"]);
Department::create([ "department" => "FINISH GOOD E"]);
Department::create([ "department" => "FINISH GOOD H"]);
Department::create([ "department" => "FINISH GOOD O"]);
Department::create([ "department" => "GA"]);
Department::create([ "department" => "GA (DRIVER)"]);
Department::create([ "department" => "GA (KEBERSIHAN)"]);
Department::create([ "department" => "GA (MESS)"]);
Department::create([ "department" => "GA (SECURITY)"]);
Department::create([ "department" => "GA (SIPIL)"]);
Department::create([ "department" => "GA (WWTP)"]);
Department::create([ "department" => "GUDANG MATERIAL"]);
Department::create([ "department" => "HRD"]);
Department::create([ "department" => "IE"]);
Department::create([ "department" => "IT"]);
Department::create([ "department" => "LABORAT "]);
Department::create([ "department" => "LAMINATING"]);
Department::create([ "department" => "MAGANG"]);
Department::create([ "department" => "MARKETING"]);
Department::create([ "department" => "ME"]);
Department::create([ "department" => "MT"]);
Department::create([ "department" => "PPIC"]);
Department::create([ "department" => "PRODUCTION DIRECTOR"]);
Department::create([ "department" => "PURCHASING"]);
Department::create([ "department" => "QIP "]);
Department::create([ "department" => "QIP-A"]);
Department::create([ "department" => "QIP-B"]);
Department::create([ "department" => "QIP-C"]);
Department::create([ "department" => "QIP-D"]);
Department::create([ "department" => "QIP-E"]);
Department::create([ "department" => "QIP-F"]);
Department::create([ "department" => "QIP-G"]);
Department::create([ "department" => "QIP-H"]);
Department::create([ "department" => "QIP-M"]);
Department::create([ "department" => "QIP-S"]);
Department::create([ "department" => "QSM"]);
Department::create([ "department" => "SABLON "]);
Department::create([ "department" => "SABLON EMBOSS"]);
Department::create([ "department" => "SEA"]);
Department::create([ "department" => "SERIKAT NON-JOB"]);
Department::create([ "department" => "SEWING COMP A"]);
Department::create([ "department" => "SEWING COMP B"]);
Department::create([ "department" => "SEWING COMP C"]);
Department::create([ "department" => "SEWING COMP D1"]);
Department::create([ "department" => "SEWING COMP D2"]);
Department::create([ "department" => "SEWING COMP E1"]);
Department::create([ "department" => "SEWING COMP E2"]);
Department::create([ "department" => "SEWING COMP H"]);
Department::create([ "department" => "SEWING MEKANIK A"]);
Department::create([ "department" => "SEWING MEKANIK B"]);
Department::create([ "department" => "SEWING MEKANIK C"]);
Department::create([ "department" => "SEWING MEKANIK D1"]);
Department::create([ "department" => "SEWING MEKANIK D2"]);
Department::create([ "department" => "SEWING MEKANIK E1"]);
Department::create([ "department" => "SEWING MEKANIK E2"]);
Department::create([ "department" => "SEWING MEKANIK H"]);
Department::create([ "department" => "SEWING-A"]);
Department::create([ "department" => "SEWING-B"]);
Department::create([ "department" => "SEWING-C"]);
Department::create([ "department" => "SEWING-D1"]);
Department::create([ "department" => "SEWING-D2"]);
Department::create([ "department" => "SEWING-E1"]);
Department::create([ "department" => "SEWING-E2"]);
Department::create([ "department" => "SEWING-H"]);
Department::create([ "department" => "SMART"]);
Department::create([ "department" => "STOCKFIT"]);
Department::create([ "department" => "TECHNICAL"]);
Department::create([ "department" => "TECHNICAL HOTPRESS"]);
Department::create([ "department" => "TECHNICAL LAB "]);
Department::create([ "department" => "TECHNICAL ROLLING COMPOUND"]);
Department::create([ "department" => "TECHNICAL SUPERMARKET"]);
Department::create([ "department" => "TRAINING"]);
Department::create([ "department" => "TRAINING CENTER");

public function import() 
    {        // Excel::import(new EmployeesImport, request()->file('file'));

        $rows =  Excel::toArray(new PromotionsImport, request()->file('file'));
        // dd($rows);
        foreach($rows as $row):
            foreach($row as $x):
                if($x['number_of_employees'] == NULL){

                }else{
                    $search_employee = DB::table('employees')->where('number_of_employees', '=', floor($x['number_of_employees']))->count();
                          
                    if($search_employee > 0){

                    }else{
                    // CEK number_of_employees	name	job_level	code_job_level	department	cell	bagian

                    // CEK Department
                    $num_dept = DB::table('departments')->where('department', '=', $x['department'])->count();
                    if($num_dept > 0){
                        $department_get = DB::table('departments')->where('department', '=', $x['department'])->first();
                        $department_id = $department_get->id;
                    }else{
                        $department_id = 12;
                    }

                    // CEK job_level
                    $num_dept = DB::table('jobs')->where('job_level', '=', $x['job_level'])->count();
                    if($num_dept > 0){
                        $job_get = DB::table('jobs')->where('job_level', '=', $x['job_level'])->first();
                        $job_id = $job_get->id;
                    }else{
                        $job_id = 12;
                    }
                    $employee_get = DB::table('employees')->where('number_of_employees', '=',  floor($x['number_of_employees']))->first();

                    DB::table('employees')
                    ->where('id', $employee_get->id)
                    ->update([
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                        'job_id'=> $job_id,
                        'department_id'=> $department_id
                        ]);

                    DB::table('promotions')->insert([
                        'promotion_date'=> date('Y-m-d'),
                        'bagian'=> $x['bagian'],
                        'cell'=> $x['cell'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                        'job_id'=> $job_id,
                        'department_id'=> $department_id,
                        'employee_id'=> $employee_get->id
                        ]);
                    }                  
                }
            endforeach;
        endforeach;
        return redirect('/datamaster/promotions');
    }

        public function model(array $row)
    {
        return new Promotion([
            //  number_of_employees	name	job_level	code_job_level	department	cell	bagian

            'number_of_employees' => $row['number_of_employees'],
            'name'=> $row['name'],
            'job_level'=> $row['job_level'],  
            'code_job_level'=> $row['code_job_level'],
            'department'=> $row['department'],
            'cell'=> $row['cell'],
            'bagian'=> $row['bagian']
        ]);
    }



                      if(select_violation == '' && violation_now == 'sp1'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP1";
                    }
                  if(select_violation == '' && violation_now == 'sp2'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP2";
                    }
                  if(select_violation == '' && violation_now == 'sp3'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP3";
                    }
                  if(select_violation == ' ' && violation_now == 'sp4'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP4";
                    }
                    if(select_violation == 'notviolation' && violation_now == 'sp1'){
                      document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP1";
                    }
                    if(select_violation == 'sp1' && violation_now == 'sp1'){
                      document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn1").value = "SP2";
                    // alert("SP 2");
                    } 
                    if(select_violation == 'sp1' && violation_now == 'sp2'){
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP3";
                    }
                    if(select_violation == 'sp2' && violation_now == 'sp1'){
                      document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP3";
                    }
                    if(select_violation == 'sp2' && violation_now == 'sp2'){
                    // alert("SP 4");
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP4";
                    }
                    if(select_violation == 'sp2' && violation_now == 'sp3'){
                    // alert("SP 4");
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP4";
                    }
                    if(select_violation == 'sp3' && violation_now == 'sp4'){
                    // alert("SP PHK");
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "PHK";
                    }




$awal  = date_create('2022-04-09');
$akhir = date_create(); // waktu sekarang
$diff  = date_diff( $awal, $akhir );

echo 'Selisih waktu: '
echo $diff->y . ' tahun, ';
echo $diff->m . ' bulan, ';
echo $diff->d . ' hari, ';
echo $diff->h . ' jam, ';
echo $diff->i . ' menit, ';
echo $diff->s . ' detik, ';
// Output: Selisih waktu: 28 tahun, 5 bulan, 9 hari, 13 jam, 7 menit, 7 detik

echo 'Total selisih hari : ' . $diff->days;
// Output: Total selisih hari: 10398



// Cari data pelanggan terakhir 
$sel_num_vio = DB::table('violations')->count();
if($sel_num_vio == 0){
  $sta_viol = 'notviolation';
}else{
  $sel_vio = DB::table('violations')->latest()->first();
  $date_now = date('Y-m-d');
  $date_sta = 
  $diff  = date_diff( $date_sta, $date_now );
  if($diff->d <= 0){
    $sta_viol = 'notviolation';
  }else{
    $sta_viol = $sel_vio->status_violation';
  }
}





php artisan make:migration create_articles_table
        Schema::create('articles', function (Blueprint $table) {
            $table->id();
            $table->char('article', 5);
            $table->string('chapters')->nullable();
            $table->text('article_sound')->nullable();           
            $table->timestamps();
        });

php artisan make:migration create_paragraphs_table
        Schema::create('paragraphs', function (Blueprint $table) {
            $table->id();
            $table->char('paragraph', 5);
            $table->string('sub_chapters')->nullable();
            $table->text('description')->nullable();     
            $table->string('type_of_verse');      
            $table->foreignId('article_id');      
            $table->timestamps();
        });

php artisan make:migration create_letters_table
        Schema::create('letters', function (Blueprint $table) {
            $table->id();
            $table->text('description')->nullable();     
            $table->foreignId('paragraph_id');      
            $table->timestamps();
        });

php artisan make:migration create_violations_table
        Schema::create('violations', function (Blueprint $table) {
            $table->id();
            $table->date('date_of_violation');     
            $table->string('violation_status')->nullable();  
            $table->string('type_of_violation')->nullable();  
            $table->integer('no_violation');  
            $table->string('format')->nullable();  
            $table->string('month_of_violation')->nullable();  
            $table->string('violation_ROM')->nullable();  
            $table->string('reporting_day')->nullable();  
            $table->date('reporting_date');  
            $table->string('part')->nullable();  
            $table->text('other_information')->nullable();     
            $table->foreignId('signature_id');  
            $table->foreignId('letter_id');      
            $table->foreignId('employee_id');      
            $table->timestamps();
        });

php artisan make:migration create_layoffs_table
        Schema::create('layoffs', function (Blueprint $table) {
            $table->id();
            $table->date('layoff_date');     
            $table->string('type_of_layoff')->nullable();     
            $table->foreignId('employee_id');      
            $table->timestamps();
        });

php artisan make:migration create_signatures_table
        Schema::create('signatures', function (Blueprint $table) {
            $table->id();
            $table->string('name')->nullable();     
            $table->string('department')->nullable();     
            $table->string('part')->nullable();     
            $table->foreignId('employee_id');      
            $table->timestamps();
        });

php artisan make:migration create_default_texts_table
        Schema::create('default_texts', function (Blueprint $table) {
            $table->id();
            $table->date('layoff_date');     
            $table->text('description')->nullable();     
            $table->string('default_state')->nullable();     
            $table->string('default_type')->nullable();     
            $table->timestamps();
        });

php artisan make:migration create_hi_recaps_table
        Schema::create('hi_recaps', function (Blueprint $table) {
            $table->id();
            $table->text('description')->nullable();     
            $table->foreignId('employee_id');     
            $table->timestamps();
        });






            public function import() 
    {
        // Excel::import(new EmployeesImport, request()->file('file'));

        $rows =  Excel::toArray(new EmployeesImport, request()->file('file'));
        // dd($rows);
        foreach($rows as $row):
            foreach($row as $x):
                if($x['number_of_employees'] == NULL){

                }else{ 

                //CEK number_of_employee sudah ada pada database belum       
                    $search_employee = DB::table('employees')->where('number_of_employees', '=', floor($x['number_of_employees']))->count();
                          
                    if($search_employee > 0){

                    }else{

                        // CEK Department
                        $c_date_of_birth = $x['date_of_birth'];
                        if($c_date_of_birth == null){
                            $date_of_birth = NULL;
                        }else{
                            $date_of_birth = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_of_birth']);
                        }

                        $c_hire_date = $x['hire_date'];
                        if($c_hire_date == null){
                            $hire_date = NULL;
                        }else{
                            $hire_date = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['hire_date']);
                        }

                        $c_end_of_contract = $x['end_of_contract'];
                        if($c_end_of_contract == null){
                            $end_of_contract = NULL;
                        }else{
                            $end_of_contract = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['end_of_contract']);
                        }

                        $c_date_out = $x['date_out'];
                        if($c_date_out == null){
                            $date_out = NULL;
                        }else{
                            $date_out = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_out']);
                        }

                        $c_exit_statement = $x['exit_statement'];
                        if($c_exit_statement == null){
                            $status_employee = 'active';
                        }elseif($c_exit_statement == '-'){
                            $status_employee = 'active';
                        }elseif($c_exit_statement != null){
                            $status_employee = 'notactive';
                        }

                        $c_kode_ptkp = $x['kode_ptkp'];
                        if($c_kode_ptkp == null){
                            $kode_ptkp = '';
                        }else{
                            $date_of_birth = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_of_birth']);
                        }
                    
                        // CEK tanggal [date_of_birth, hire_date, end_of_contract, date_out, year_ptkp ]
                        
                        // CEK date_of_birth '12/04/2022
                        // $date_of_birth_t = strtotime($x['date_of_birth']);             
                        // $date_of_birth = date('Y-m-d', $date_of_birth_t);
                        // $date = intval($row['date_of_birth']);
                        


                        // CEK hire_date
                        // $hire_date_t = strtotime($x['hire_date']);             
                        // $hire_date = date('Y-m-d', $hire_date_t);

                        // CEK end_of_contract 
                        // $end_of_contract_t = strtotime($x['end_of_contract']);             
                        // $end_of_contract = date('Y-m-d', $end_of_contract_t);

                        // CEK date_out          
                        // $date_out_t = strtotime($x['date_out']);             
                        // $date_out = date('Y-m-d', $date_out_t);

                        // CEK year_ptkp
                        // $year_ptkp_t = strtotime($x['year_ptkp']);             
                        // $year_ptkp = date('Y-m-d', $year_ptkp_t);
                        

                        // CEK Department
                        $num_dept = DB::table('departments')->where('department', '=', $x['department'])->count();
                        if($num_dept > 0){
                            $department_get = DB::table('departments')->where('department', '=', $x['department'])->first();
                            $department_id = $department_get->id;
                        }else{
                            $department_id = 21;
                        }

                        // CEK job_level
                        $num_dept = DB::table('jobs')->where('job_level', '=', $x['job_level'])->count();
                        if($num_dept > 0){
                            $job_get = DB::table('jobs')->where('job_level', '=', $x['job_level'])->first();
                            $job_id = $job_get->id;
                        }else{
                            $job_id = 104;
                        }

                // if($department_get == )
                // $job_get = DB::table('jobs')->where('jobs', '=', $x['job'])->first();
                
                
                        DB::table('employees')->insert([
                            'number_of_employees' => floor($x['number_of_employees']),
                            'name'=> $x['name'],
                            'gender'=> $x['gender'],  
                            'place_of_birth'=> $x['place_of_birth'],
                            'date_of_birth'=> \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['date_of_birth']),
                            'marital_status'=> $x['marital_status'],
                            'religion'=> $x['religion'], 
                            'biological_mothers_name' => $x['biological_mothers_name'],
                            'national_id'=> $x['national_id'],
                            'address_jalan'=> $x['address_jalan'],
                            'address_rt'=> $x['address_rt'],
                            'address_rw'=> $x['address_rw'],
                            'address_village'=> $x['address_village'],
                            'address_district'=> $x['address_district'],
                            'address_city'=> $x['address_city'],
                            'address_province'=> $x['address_province'],
                            'phone'=> $x['phone'],
                            'email'=> $x['email'],
                            'npwp'=> $x['npwp'],
                            'bank_name'=> $x['bank_name'],
                            'bank_branch'=> $x['bank_branch'],
                            'bank_account_name'=> $x['bank_account_name'],
                            'bank_account_number'=> $x['bank_account_number'],
                            'bpjs_ketenagakerjaan'=> $x['bpjs_ketenagakerjaan'],
                            'bpjs_kesehatan' => $x['bpjs_kesehatan'],
                            'hire_date'=> \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['hire_date']),
                            'employee_type'=> $x['employee_type'],
                            'end_of_contract'=> \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($x['end_of_contract']),
                            'date_out'=> $date_out,
                            'exit_statement'=> $x['exit_statement'],
                            'cell'=> $x['cell'], 
                            'bagian'=> $x['bagian'],
                            'kode_ptkp'=> $x['kode_ptkp'],
                            'year_ptkp'=> $x['year_ptkp'],
                            'educate'=> $x['educate'],
                            'major'=> $x['major'],
                            'finger_id' => $x['number_of_employees'],
                            'status_employee' => 'active',
                            'date_bpjs_ketenagakerjaan'=> date('Y-m-d'),
                            'date_bpjs_kesehatan'=> date('Y-m-d'),
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                            'job_id'=> $job_id,
                            'department_id'=> $department_id
                            ]);

                        // TAMPILKAN DATA KARYAWAN YANG SUDAH DI INSERT
                        $employee_get = DB::table('employees')->where('number_of_employees', '=', floor($x['number_of_employees']))->first();
                            
                        DB::table('salaries')->insert([
                            'employee_id' => $employee_get->id,
                            'basic_salary' => $x['basic_salary'],
                            'positional_allowance' => $x['positional_allowance'],
                            'transportation_allowance' => $x['transportation_allowance'],
                            'attendance_allowance' => $x['attendance_allowance'],
                            'grade_salary' => $x['grade_salary'],
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                            'total_salary' => 0
                        ]);

                        DB::table('startworks')->insert([
                            'startwork_date'=> date('Y-m-d'),
                            'bagian'=> $x['bagian'],
                            'cell'=> $x['cell'],
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                            'job_id'=> $job_id,
                            'department_id'=> $department_id,
                            'employee_id'=> $employee_get->id
                            ]);
                    }
                }
            endforeach;
        endforeach;
        return redirect('/datamaster/employees');
    }

        public function model(array $row)
    {
        return new Employee([
            //
            
            'number_of_employees' => $row['number_of_employees'],
            'name'=> $row['name'],
            'gender'=> $row['gender'],  
            'place_of_birth'=> $row['place_of_birth'],
            'date_of_birth'=> $row['date_of_birth'],
            'marital_status'=> $row['marital_status'],
            'religion'=> $row['religion'], 
            'biological_mothers_name' => $row['biological_mothers_name'],
            'national_id'=> $row['national_id'],
            'address_jalan'=> $row['address_jalan'],
            'address_rt'=> $row['address_rt'],
            'address_rw'=> $row['address_rw'],
            'address_village'=> $row['address_village'],
            'address_district'=> $row['address_district'],
            'address_city'=> $row['address_city'],
            'address_province'=> $row['address_province'],
            'phone'=> $row['phone'],
            'email'=> $row['email'],
            'npwp'=> $row['npwp'],
            'bank_name'=> $row['bank_name'],
            'bank_branch'=> $row['bank_branch'],
            'bank_account_name'=> $row['bank_account_name'],
            'bank_account_number'=> $row['bank_account_number'],
            'bpjs_ketenagakerjaan'=> $row['bpjs_ketenagakerjaan'],
            'bpjs_kesehatan' => $row['bpjs_kesehatan'],
            'hire_date'=> $row['hire_date'],
            'employee_type'=> $row['employee_type'],
            'end_of_contract'=> $row['end_of_contract'],
            'date_out'=> $row['date_out'],
            'exit_statement'=> $row['exit_statement'],
            'job_id'=> $row['job_id'],
            'department_id'=> $row['department_id'],            
            'job_level'=> $row['job_level'],
            'department'=> $row['department'],
            'cell'=> $row['cell'], 
            'bagian'=> $row['bagian'],
            'kode_ptkp'=> $row['kode_ptkp'],
            'year_ptkp'=> $row['year_ptkp'],
            'basic_salary' => $row['basic_salary'],
            'educate'=> $row['educate'],
            'major'=> $row['major'],

            'positional_allowance' => $row['positional_allowance'],
            'transportation_allowance' => $row['transportation_allowance'],
            'attendance_allowance' => $row['attendance_allowance'],
            'grade_salary' => $row['grade_salary'],
            
            'finger_id' => $row['number_of_employees'],
            'date_bpjs_ketenagakerjaan'=> $row['date_bpjs_ketenagakerjaan'],
            'date_bpjs_kesehatan'=> $row['date_bpjs_kesehatan'],
        ]);
    }




INSERT 
INTO 
`alphabets`
(`alphabet`, `description`, 
`firts_periode`, `last_periode`, 
`alphabet_type`,`paragraph_id`
) 
VALUES 
(
    'f','Tidak membersihkan tempat kerja sehingga berantakan dan kotor, setelah selesai kerja dan langsung meninggalkan tempat kerja.',
    '2022','2024',
    'no', 2
),
(
    'g','Tidak masuk kerja tanpa keterangan/ Alpha selama 2 (dua) hari tidak berturut-turut selama satu bulan.',
    '2022','2024',
    'no', 2
),
(
    'h','Menolak diperiksa oleh SATPAM saat masuk atau meninggalkan kerja saat waktu istirahat atau pulang.',
    '2022','2024',
    'no', 2
),
(
    'i','Malas dan/atau santai dalam bekerja setelah diberikan peringatan dengan dibuktikan data pembuktian.',
    '2022','2024',
    'no', 2
),
(
    'j','Melanggar tata kerja atau tidak mempergunakan peralatan yang ditentukan sehingga hasil produksi rusak.',
    '2022','2024',
    'no', 2
),
(
    'k','Mengerjakan tugas tidak sesuai dengan Standar Operasional Perusahaan (SOP) yang mengakibatkan kesalahan dalam pekerjaannya (proses kerja).',
    '2022','2024',
    'no', 2
),
(
    'l','Membuat keributan dan bertengkar mulut di tempat kerja.',
    '2022','2024',
    'no', 2
),
(
    'm','Atasan tidak memberikan bimbingan kepada bawahannya sesuai norma-norma yang berlaku.',
    '2022','2024',
    'no', 2
),
(
    'n','Berhenti dan/atau meninggalkan pekerjaan sebelum waktunya tanpa seijin pimpinan.',
    '2022','2024',
    'no', 2
),
(
    'o','Mengajak masuk saudara atau teman ke lokasi pabrik tanpa seijin petugas atau Pengusaha.',
    '2022','2024',
    'no', 2
),
(
    'p','Boros dalam menggunakan bahan baku, sehingga merugikan perusahaan.',
    '2022','2024',
    'no', 2
),
(
    'q','Tidak memakai Kartu Pengenal Pekerja (KPK), selama dilingkungan perusahaan setelah diberikan peringatan lisan.',
    '2022','2024',
    'no', 2
),
(
    'r','Terbukti mempergunakan barang bawaannya yang tidak sesuai dengan tugas dan jenis pekerjaannya.',
    '2022','2024',
    'no', 2
),
(
    's','Membawa makanan dan/atau makan di area kerja sehingga mengganggu proses dan hasil kerja.',
    '2022','2024',
    'no', 2
),
(
    't','Pekerja menggunakan inventaris perusahaan untuk kepentingan pribadi;',
    '2022','2024',
    'no', 2
),
(
    'u','Petugas SATPAM memakai seragam dan perlengkapan tidak sesuai dengan jam kerja/ shiftnya.',
    '2022','2024',
    'no', 2
),
(
    'v','Bagi karyawati/ Ibu hamil dengan sengaja tidak mau melaporkan kehamilannya pada usia kehamilan 3 (tiga) bulan pada HRD/ KLINIK',
    '2022','2024',
    'no', 2
),
(
    'w','Setelah waktu istirahat selesai tidak segera kembali bekerja dan tidak berada di tempat kerja untuk urusan yang bukan pekerjaan.',
    '2022','2024',
    'no', 2
),
(
    'x','Terlambat masuk kerja lebih dari jam 7 (tujuh) atau jam masuk kerja tanpa alasan yang jelas/ sah sebanyak 3 (tiga) kali atau lebih dalam 1 (satu) bulan.',
    '2022','2024',
    'no', 2
),
(
    'y','Tidak melakukan scanning absensi masuk atau pulang bekerja sebanyak 5 (lima) kali dalam 1 (satu) bulan.',
    '2022','2024',
    'no', 2
),
(
    'z','Mengerjakan proses produksi tapi hasil produksinya cacat atau rusak.',
    '2022','2025',
    'no', 2
),
(
    'aa','Memakai jarum pentul atau peniti atau bahan lain yang berbahan metal atau sejenisnya yang berpotensi dapat mengganggu proses produksi.',
    '2022','2025',
    'no', 2
),
(
    'bb','Membawa jarum/ metal dari luar perusahaan.',
    '2022','2024',
    'no', 2
),
(
    'cc','Tanda tangan Surat Perintah Lembur namun Pekerja tidak jadi lembur tanpa adanya pemberitahuan kepada pimpinan.',
    '2022','2024',
    'no', 2
),
(
    'dd','Menolak pemeriksaan atas kesehatannya oleh dokter/tenaga medis yang telah disediakan perusahaan.',
    '2022','2024',
    'no', 2
)