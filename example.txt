Department
Job::create(["code_job_level" => "PD", "job_level" => "PRESIDEN DIREKTUR", "level" => "1"]);
Job::create(["code_job_level" => "SD", "job_level" => "SENIOR DIREKTUR", "level" => "2"]);
Job::create(["code_job_level" => "DIR", "job_level" => "DIREKTUR", "level" => "3"]);
Job::create(["code_job_level" => "ASDIR", "job_level" => "ASISTEN DIREKTUR", "level" => "4"]);
Job::create(["code_job_level" => "SM", "job_level" => "SENIOR MANAGER", "level" => "5"]);
Job::create(["code_job_level" => "AMA", "job_level" => "ASISTEN MANAGER A", "level" => "6"]);
Job::create(["code_job_level" => "MGRA", "job_level" => "MANAGER A", "level" => "6"]);
Job::create(["code_job_level" => "FMGR", "job_level" => "FACTORY MANAGER", "level" => "7"]);
Job::create(["code_job_level" => "AMI", "job_level" => "ASISTEN MANAGER I", "level" => "8"]);
Job::create(["code_job_level" => "MGRI", "job_level" => "MANAGER I", "level" => "8"]);
Job::create(["code_job_level" => "DOK", "job_level" => "DOKTER", "level" => "8"]);
Job::create(["code_job_level" => "SPV", "job_level" => "SUPERVISOR", "level" => "9"]);
Job::create(["code_job_level" => "ASPV", "job_level" => "ASISTEN SUPERVISOR", "level" => "9"]);
Job::create(["code_job_level" => "LD", "job_level" => "LEADER", "level" => "10"]);
Job::create(["code_job_level" => "SST", "job_level" => "SENIOR STAFF", "level" => "10"]);
Job::create(["code_job_level" => "ST", "job_level" => "STAFF", "level" => "11"]);
Job::create(["code_job_level" => "STO", "job_level" => "STAFF OPERATOR", "level" => "11"]);
Job::create(["code_job_level" => "PWT", "job_level" => "PERAWAT", "level" => "11"]);
Job::create(["code_job_level" => "DRV", "job_level" => "DRIVER", "level" => "12"]);
Job::create(["code_job_level" => "OP", "job_level" => "OPERATOR", "level" => "12"]);




JOb Level
INSERT INTO `jobs`( `code_job_level`, `job_level`, `level`) VALUES 
("PD", "PRESIDEN DIREKTUR", "1"),
("SD", "SENIOR DIREKTUR", "2"),
("DIR", "DIREKTUR", "3"),
("ASDIR", "ASISTEN DIREKTUR", "4"),
("SM", "SENIOR MANAGER", "5"),
("AMA", "ASISTEN MANAGER A", "6"),
("MGRA", "MANAGER A", "6"),
("FMGR", "FACTORY MANAGER", "7"),
("AMI", "ASISTEN MANAGER I", "8"),
("MGRI", "MANAGER I", "8"),
("DOK", "DOKTER", "8"),
("SPV", "SUPERVISOR", "9"),
("ASPV", "ASISTEN SUPERVISOR", "9"),
("LD", "LEADER", "10"),
("SST", "SENIOR STAFF", "10"),
("ST", "STAFF", "11"),
("STO", "STAFF OPERATOR", "11"),
("PWT", "PERAWAT", "11"),
("DRV", "DRIVER", "12"),
("OP", "OPERATOR", "12");

Department::create([ "department" => "ACCOUNTING"]);
Department::create([ "department" => "ASSEMBLY-A"]);
Department::create([ "department" => "ASSEMBLY-B"]);
Department::create([ "department" => "ASSEMBLY-C"]);
Department::create([ "department" => "ASSEMBLY-D"]);
Department::create([ "department" => "ASSEMBLY-D1"]);
Department::create([ "department" => "ASSEMBLY-D2"]);
Department::create([ "department" => "ASSEMBLY-E1"]);
Department::create([ "department" => "ASSEMBLY-E2"]);
Department::create([ "department" => "ASSEMBLY-H"]);
Department::create([ "department" => "CHEMICAL ENGINEERING"]);
Department::create([ "department" => "CUTTING-A"]);
Department::create([ "department" => "CUTTING-B"]);
Department::create([ "department" => "CUTTING-C"]);
Department::create([ "department" => "CUTTING-D1"]);
Department::create([ "department" => "CUTTING-D2"]);
Department::create([ "department" => "CUTTING-E1"]);
Department::create([ "department" => "CUTTING-E2"]);
Department::create([ "department" => "CUTTING-H"]);
Department::create([ "department" => "DEVELOPMENT"]);
Department::create([ "department" => "EMBOSS"]);
Department::create([ "department" => "ENGINEERING"]);
Department::create([ "department" => "EPTE"]);
Department::create([ "department" => "EXIM"]);
Department::create([ "department" => "FACTORY MGR A"]);
Department::create([ "department" => "FACTORY MGR C"]);
Department::create([ "department" => "FACTORY MGR D"]);
Department::create([ "department" => "FACTORY MGR E"]);
Department::create([ "department" => "FINISH GOOD A"]);
Department::create([ "department" => "FINISH GOOD C"]);
Department::create([ "department" => "FINISH GOOD D"]);
Department::create([ "department" => "FINISH GOOD E"]);
Department::create([ "department" => "FINISH GOOD H"]);
Department::create([ "department" => "FINISH GOOD O"]);
Department::create([ "department" => "GA"]);
Department::create([ "department" => "GA (DRIVER)"]);
Department::create([ "department" => "GA (KEBERSIHAN)"]);
Department::create([ "department" => "GA (MESS)"]);
Department::create([ "department" => "GA (SECURITY)"]);
Department::create([ "department" => "GA (SIPIL)"]);
Department::create([ "department" => "GA (WWTP)"]);
Department::create([ "department" => "GUDANG MATERIAL"]);
Department::create([ "department" => "HRD"]);
Department::create([ "department" => "IE"]);
Department::create([ "department" => "IT"]);
Department::create([ "department" => "LABORAT "]);
Department::create([ "department" => "LAMINATING"]);
Department::create([ "department" => "MAGANG"]);
Department::create([ "department" => "MARKETING"]);
Department::create([ "department" => "ME"]);
Department::create([ "department" => "MT"]);
Department::create([ "department" => "PPIC"]);
Department::create([ "department" => "PRODUCTION DIRECTOR"]);
Department::create([ "department" => "PURCHASING"]);
Department::create([ "department" => "QIP "]);
Department::create([ "department" => "QIP-A"]);
Department::create([ "department" => "QIP-B"]);
Department::create([ "department" => "QIP-C"]);
Department::create([ "department" => "QIP-D"]);
Department::create([ "department" => "QIP-E"]);
Department::create([ "department" => "QIP-F"]);
Department::create([ "department" => "QIP-G"]);
Department::create([ "department" => "QIP-H"]);
Department::create([ "department" => "QIP-M"]);
Department::create([ "department" => "QIP-S"]);
Department::create([ "department" => "QSM"]);
Department::create([ "department" => "SABLON "]);
Department::create([ "department" => "SABLON EMBOSS"]);
Department::create([ "department" => "SEA"]);
Department::create([ "department" => "SERIKAT NON-JOB"]);
Department::create([ "department" => "SEWING COMP A"]);
Department::create([ "department" => "SEWING COMP B"]);
Department::create([ "department" => "SEWING COMP C"]);
Department::create([ "department" => "SEWING COMP D1"]);
Department::create([ "department" => "SEWING COMP D2"]);
Department::create([ "department" => "SEWING COMP E1"]);
Department::create([ "department" => "SEWING COMP E2"]);
Department::create([ "department" => "SEWING COMP H"]);
Department::create([ "department" => "SEWING MEKANIK A"]);
Department::create([ "department" => "SEWING MEKANIK B"]);
Department::create([ "department" => "SEWING MEKANIK C"]);
Department::create([ "department" => "SEWING MEKANIK D1"]);
Department::create([ "department" => "SEWING MEKANIK D2"]);
Department::create([ "department" => "SEWING MEKANIK E1"]);
Department::create([ "department" => "SEWING MEKANIK E2"]);
Department::create([ "department" => "SEWING MEKANIK H"]);
Department::create([ "department" => "SEWING-A"]);
Department::create([ "department" => "SEWING-B"]);
Department::create([ "department" => "SEWING-C"]);
Department::create([ "department" => "SEWING-D1"]);
Department::create([ "department" => "SEWING-D2"]);
Department::create([ "department" => "SEWING-E1"]);
Department::create([ "department" => "SEWING-E2"]);
Department::create([ "department" => "SEWING-H"]);
Department::create([ "department" => "SMART"]);
Department::create([ "department" => "STOCKFIT"]);
Department::create([ "department" => "TECHNICAL"]);
Department::create([ "department" => "TECHNICAL HOTPRESS"]);
Department::create([ "department" => "TECHNICAL LAB "]);
Department::create([ "department" => "TECHNICAL ROLLING COMPOUND"]);
Department::create([ "department" => "TECHNICAL SUPERMARKET"]);
Department::create([ "department" => "TRAINING"]);
Department::create([ "department" => "TRAINING CENTER");

public function import() 
    {        // Excel::import(new EmployeesImport, request()->file('file'));

        $rows =  Excel::toArray(new PromotionsImport, request()->file('file'));
        // dd($rows);
        foreach($rows as $row):
            foreach($row as $x):
                if($x['number_of_employees'] == NULL){

                }else{
                    $search_employee = DB::table('employees')->where('number_of_employees', '=', floor($x['number_of_employees']))->count();
                          
                    if($search_employee > 0){

                    }else{
                    // CEK number_of_employees	name	job_level	code_job_level	department	cell	bagian

                    // CEK Department
                    $num_dept = DB::table('departments')->where('department', '=', $x['department'])->count();
                    if($num_dept > 0){
                        $department_get = DB::table('departments')->where('department', '=', $x['department'])->first();
                        $department_id = $department_get->id;
                    }else{
                        $department_id = 12;
                    }

                    // CEK job_level
                    $num_dept = DB::table('jobs')->where('job_level', '=', $x['job_level'])->count();
                    if($num_dept > 0){
                        $job_get = DB::table('jobs')->where('job_level', '=', $x['job_level'])->first();
                        $job_id = $job_get->id;
                    }else{
                        $job_id = 12;
                    }
                    $employee_get = DB::table('employees')->where('number_of_employees', '=',  floor($x['number_of_employees']))->first();

                    DB::table('employees')
                    ->where('id', $employee_get->id)
                    ->update([
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                        'job_id'=> $job_id,
                        'department_id'=> $department_id
                        ]);

                    DB::table('promotions')->insert([
                        'promotion_date'=> date('Y-m-d'),
                        'bagian'=> $x['bagian'],
                        'cell'=> $x['cell'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                        'job_id'=> $job_id,
                        'department_id'=> $department_id,
                        'employee_id'=> $employee_get->id
                        ]);
                    }                  
                }
            endforeach;
        endforeach;
        return redirect('/datamaster/promotions');
    }

        public function model(array $row)
    {
        return new Promotion([
            //  number_of_employees	name	job_level	code_job_level	department	cell	bagian

            'number_of_employees' => $row['number_of_employees'],
            'name'=> $row['name'],
            'job_level'=> $row['job_level'],  
            'code_job_level'=> $row['code_job_level'],
            'department'=> $row['department'],
            'cell'=> $row['cell'],
            'bagian'=> $row['bagian']
        ]);
    }



                      if(select_violation == '' && violation_now == 'sp1'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP1";
                    }
                  if(select_violation == '' && violation_now == 'sp2'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP2";
                    }
                  if(select_violation == '' && violation_now == 'sp3'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP3";
                    }
                  if(select_violation == ' ' && violation_now == 'sp4'){
                    document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP4";
                    }
                    if(select_violation == 'notviolation' && violation_now == 'sp1'){
                      document.getElementById("btn_modal_click1").click();
                      document.getElementById("jpn1").value = "SP1";
                    }
                    if(select_violation == 'sp1' && violation_now == 'sp1'){
                      document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn1").value = "SP2";
                    // alert("SP 2");
                    } 
                    if(select_violation == 'sp1' && violation_now == 'sp2'){
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP3";
                    }
                    if(select_violation == 'sp2' && violation_now == 'sp1'){
                      document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP3";
                    }
                    if(select_violation == 'sp2' && violation_now == 'sp2'){
                    // alert("SP 4");
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP4";
                    }
                    if(select_violation == 'sp2' && violation_now == 'sp3'){
                    // alert("SP 4");
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "SP4";
                    }
                    if(select_violation == 'sp3' && violation_now == 'sp4'){
                    // alert("SP PHK");
                    document.getElementById("btn_modal_click2").click();
                      document.getElementById("jpn2").value = "PHK";
                    }




$awal  = date_create('2022-04-09');
$akhir = date_create(); // waktu sekarang
$diff  = date_diff( $awal, $akhir );

echo 'Selisih waktu: '
echo $diff->y . ' tahun, ';
echo $diff->m . ' bulan, ';
echo $diff->d . ' hari, ';
echo $diff->h . ' jam, ';
echo $diff->i . ' menit, ';
echo $diff->s . ' detik, ';
// Output: Selisih waktu: 28 tahun, 5 bulan, 9 hari, 13 jam, 7 menit, 7 detik

echo 'Total selisih hari : ' . $diff->days;
// Output: Total selisih hari: 10398



// Cari data pelanggan terakhir 
$sel_num_vio = DB::table('violations')->count();
if($sel_num_vio == 0){
  $sta_viol = 'notviolation';
}else{
  $sel_vio = DB::table('violations')->latest()->first();
  $date_now = date('Y-m-d');
  $date_sta = 
  $diff  = date_diff( $date_sta, $date_now );
  if($diff->d <= 0){
    $sta_viol = 'notviolation';
  }else{
    $sta_viol = $sel_vio->status_violation';
  }
}